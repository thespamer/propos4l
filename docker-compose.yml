version: '3.8'

services:
  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://backend:8000
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next

  backend:
    build: ./backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/propos4l
      - TESSERACT_PATH=/usr/bin/tesseract
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - pdf_storage:/app/storage/pdfs
      - template_storage:/app/storage/templates

  db:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=propos4l
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  migrations:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: ["/bin/sh", "-c", "alembic upgrade head"]
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/propos4l
    depends_on:
      db:
        condition: service_healthy

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes

volumes:
  postgres_data:
  redis_data:
  pdf_storage:
  template_storage:
